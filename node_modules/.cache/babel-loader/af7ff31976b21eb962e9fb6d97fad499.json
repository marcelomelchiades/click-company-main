{"ast":null,"code":"export function isPermanentChar(maskOptions, pos) {\n  return maskOptions.permanents.indexOf(pos) !== -1;\n}\nexport function isAllowedChar(maskOptions, pos, character) {\n  var mask = maskOptions.mask,\n      charsRules = maskOptions.charsRules;\n\n  if (!character) {\n    return false;\n  }\n\n  if (isPermanentChar(maskOptions, pos)) {\n    return mask[pos] === character;\n  }\n\n  var ruleChar = mask[pos];\n  var charRule = charsRules[ruleChar];\n  return new RegExp(charRule).test(character);\n}\nexport function isEmpty(maskOptions, value) {\n  return value.split('').every(function (character, i) {\n    return isPermanentChar(maskOptions, i) || !isAllowedChar(maskOptions, i, character);\n  });\n}\nexport function getFilledLength(maskOptions, value) {\n  var maskChar = maskOptions.maskChar,\n      prefix = maskOptions.prefix;\n\n  if (!maskChar) {\n    while (value.length > prefix.length && isPermanentChar(maskOptions, value.length - 1)) {\n      value = value.slice(0, value.length - 1);\n    }\n\n    return value.length;\n  }\n\n  var filledLength = prefix.length;\n\n  for (var i = value.length; i >= prefix.length; i--) {\n    var character = value[i];\n    var isEnteredCharacter = !isPermanentChar(maskOptions, i) && isAllowedChar(maskOptions, i, character);\n\n    if (isEnteredCharacter) {\n      filledLength = i + 1;\n      break;\n    }\n  }\n\n  return filledLength;\n}\nexport function isFilled(maskOptions, value) {\n  return getFilledLength(maskOptions, value) === maskOptions.mask.length;\n}\nexport function formatValue(maskOptions, value) {\n  var maskChar = maskOptions.maskChar,\n      mask = maskOptions.mask,\n      prefix = maskOptions.prefix;\n\n  if (!maskChar) {\n    value = insertString(maskOptions, '', value, 0);\n\n    if (value.length < prefix.length) {\n      value = prefix;\n    }\n\n    while (value.length < mask.length && isPermanentChar(maskOptions, value.length)) {\n      value += mask[value.length];\n    }\n\n    return value;\n  }\n\n  if (value) {\n    var emptyValue = formatValue(maskOptions, '');\n    return insertString(maskOptions, emptyValue, value, 0);\n  }\n\n  for (var i = 0; i < mask.length; i++) {\n    if (isPermanentChar(maskOptions, i)) {\n      value += mask[i];\n    } else {\n      value += maskChar;\n    }\n  }\n\n  return value;\n}\nexport function clearRange(maskOptions, value, start, len) {\n  var end = start + len;\n  var maskChar = maskOptions.maskChar,\n      mask = maskOptions.mask,\n      prefix = maskOptions.prefix;\n  var arrayValue = value.split('');\n\n  if (!maskChar) {\n    // remove any permanent chars after clear range, they will be added back by foramtValue\n    for (var i = end; i < arrayValue.length; i++) {\n      if (isPermanentChar(maskOptions, i)) {\n        arrayValue[i] = '';\n      }\n    }\n\n    start = Math.max(prefix.length, start);\n    arrayValue.splice(start, end - start);\n    value = arrayValue.join('');\n    return formatValue(maskOptions, value);\n  }\n\n  return arrayValue.map(function (character, i) {\n    if (i < start || i >= end) {\n      return character;\n    }\n\n    if (isPermanentChar(maskOptions, i)) {\n      return mask[i];\n    }\n\n    return maskChar;\n  }).join('');\n}\nexport function insertString(maskOptions, value, insertStr, insertPos) {\n  var mask = maskOptions.mask,\n      maskChar = maskOptions.maskChar,\n      prefix = maskOptions.prefix;\n  var arrayInsertStr = insertStr.split('');\n  var isInputFilled = isFilled(maskOptions, value);\n\n  var isUsablePosition = function isUsablePosition(pos, character) {\n    return !isPermanentChar(maskOptions, pos) || character === mask[pos];\n  };\n\n  var isUsableCharacter = function isUsableCharacter(character, pos) {\n    return !maskChar || !isPermanentChar(maskOptions, pos) || character !== maskChar;\n  };\n\n  if (!maskChar && insertPos > value.length) {\n    value += mask.slice(value.length, insertPos);\n  }\n\n  arrayInsertStr.every(function (insertCharacter) {\n    while (!isUsablePosition(insertPos, insertCharacter)) {\n      if (insertPos >= value.length) {\n        value += mask[insertPos];\n      }\n\n      if (!isUsableCharacter(insertCharacter, insertPos)) {\n        return true;\n      }\n\n      insertPos++; // stop iteration if maximum value length reached\n\n      if (insertPos >= mask.length) {\n        return false;\n      }\n    }\n\n    var isAllowed = isAllowedChar(maskOptions, insertPos, insertCharacter) || insertCharacter === maskChar;\n\n    if (!isAllowed) {\n      return true;\n    }\n\n    if (insertPos < value.length) {\n      if (maskChar || isInputFilled || insertPos < prefix.length) {\n        value = value.slice(0, insertPos) + insertCharacter + value.slice(insertPos + 1);\n      } else {\n        value = value.slice(0, insertPos) + insertCharacter + value.slice(insertPos);\n        value = formatValue(maskOptions, value);\n      }\n    } else if (!maskChar) {\n      value += insertCharacter;\n    }\n\n    insertPos++; // stop iteration if maximum value length reached\n\n    return insertPos < mask.length;\n  });\n  return value;\n}\nexport function getInsertStringLength(maskOptions, value, insertStr, insertPos) {\n  var mask = maskOptions.mask,\n      maskChar = maskOptions.maskChar;\n  var arrayInsertStr = insertStr.split('');\n  var initialInsertPos = insertPos;\n\n  var isUsablePosition = function isUsablePosition(pos, character) {\n    return !isPermanentChar(maskOptions, pos) || character === mask[pos];\n  };\n\n  arrayInsertStr.every(function (insertCharacter) {\n    while (!isUsablePosition(insertPos, insertCharacter)) {\n      insertPos++; // stop iteration if maximum value length reached\n\n      if (insertPos >= mask.length) {\n        return false;\n      }\n    }\n\n    var isAllowed = isAllowedChar(maskOptions, insertPos, insertCharacter) || insertCharacter === maskChar;\n\n    if (isAllowed) {\n      insertPos++;\n    } // stop iteration if maximum value length reached\n\n\n    return insertPos < mask.length;\n  });\n  return insertPos - initialInsertPos;\n}","map":{"version":3,"sources":["/home/clickc/www/click-company-main/node_modules/react-input-mask/es/utils/string.js"],"names":["isPermanentChar","maskOptions","pos","permanents","indexOf","isAllowedChar","character","mask","charsRules","ruleChar","charRule","RegExp","test","isEmpty","value","split","every","i","getFilledLength","maskChar","prefix","length","slice","filledLength","isEnteredCharacter","isFilled","formatValue","insertString","emptyValue","clearRange","start","len","end","arrayValue","Math","max","splice","join","map","insertStr","insertPos","arrayInsertStr","isInputFilled","isUsablePosition","isUsableCharacter","insertCharacter","isAllowed","getInsertStringLength","initialInsertPos"],"mappings":"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","sourcesContent":["export function isPermanentChar(maskOptions, pos) {\n  return maskOptions.permanents.indexOf(pos) !== -1;\n}\nexport function isAllowedChar(maskOptions, pos, character) {\n  var mask = maskOptions.mask,\n      charsRules = maskOptions.charsRules;\n\n  if (!character) {\n    return false;\n  }\n\n  if (isPermanentChar(maskOptions, pos)) {\n    return mask[pos] === character;\n  }\n\n  var ruleChar = mask[pos];\n  var charRule = charsRules[ruleChar];\n  return new RegExp(charRule).test(character);\n}\nexport function isEmpty(maskOptions, value) {\n  return value.split('').every(function (character, i) {\n    return isPermanentChar(maskOptions, i) || !isAllowedChar(maskOptions, i, character);\n  });\n}\nexport function getFilledLength(maskOptions, value) {\n  var maskChar = maskOptions.maskChar,\n      prefix = maskOptions.prefix;\n\n  if (!maskChar) {\n    while (value.length > prefix.length && isPermanentChar(maskOptions, value.length - 1)) {\n      value = value.slice(0, value.length - 1);\n    }\n\n    return value.length;\n  }\n\n  var filledLength = prefix.length;\n\n  for (var i = value.length; i >= prefix.length; i--) {\n    var character = value[i];\n    var isEnteredCharacter = !isPermanentChar(maskOptions, i) && isAllowedChar(maskOptions, i, character);\n\n    if (isEnteredCharacter) {\n      filledLength = i + 1;\n      break;\n    }\n  }\n\n  return filledLength;\n}\nexport function isFilled(maskOptions, value) {\n  return getFilledLength(maskOptions, value) === maskOptions.mask.length;\n}\nexport function formatValue(maskOptions, value) {\n  var maskChar = maskOptions.maskChar,\n      mask = maskOptions.mask,\n      prefix = maskOptions.prefix;\n\n  if (!maskChar) {\n    value = insertString(maskOptions, '', value, 0);\n\n    if (value.length < prefix.length) {\n      value = prefix;\n    }\n\n    while (value.length < mask.length && isPermanentChar(maskOptions, value.length)) {\n      value += mask[value.length];\n    }\n\n    return value;\n  }\n\n  if (value) {\n    var emptyValue = formatValue(maskOptions, '');\n    return insertString(maskOptions, emptyValue, value, 0);\n  }\n\n  for (var i = 0; i < mask.length; i++) {\n    if (isPermanentChar(maskOptions, i)) {\n      value += mask[i];\n    } else {\n      value += maskChar;\n    }\n  }\n\n  return value;\n}\nexport function clearRange(maskOptions, value, start, len) {\n  var end = start + len;\n  var maskChar = maskOptions.maskChar,\n      mask = maskOptions.mask,\n      prefix = maskOptions.prefix;\n  var arrayValue = value.split('');\n\n  if (!maskChar) {\n    // remove any permanent chars after clear range, they will be added back by foramtValue\n    for (var i = end; i < arrayValue.length; i++) {\n      if (isPermanentChar(maskOptions, i)) {\n        arrayValue[i] = '';\n      }\n    }\n\n    start = Math.max(prefix.length, start);\n    arrayValue.splice(start, end - start);\n    value = arrayValue.join('');\n    return formatValue(maskOptions, value);\n  }\n\n  return arrayValue.map(function (character, i) {\n    if (i < start || i >= end) {\n      return character;\n    }\n\n    if (isPermanentChar(maskOptions, i)) {\n      return mask[i];\n    }\n\n    return maskChar;\n  }).join('');\n}\nexport function insertString(maskOptions, value, insertStr, insertPos) {\n  var mask = maskOptions.mask,\n      maskChar = maskOptions.maskChar,\n      prefix = maskOptions.prefix;\n  var arrayInsertStr = insertStr.split('');\n  var isInputFilled = isFilled(maskOptions, value);\n\n  var isUsablePosition = function isUsablePosition(pos, character) {\n    return !isPermanentChar(maskOptions, pos) || character === mask[pos];\n  };\n\n  var isUsableCharacter = function isUsableCharacter(character, pos) {\n    return !maskChar || !isPermanentChar(maskOptions, pos) || character !== maskChar;\n  };\n\n  if (!maskChar && insertPos > value.length) {\n    value += mask.slice(value.length, insertPos);\n  }\n\n  arrayInsertStr.every(function (insertCharacter) {\n    while (!isUsablePosition(insertPos, insertCharacter)) {\n      if (insertPos >= value.length) {\n        value += mask[insertPos];\n      }\n\n      if (!isUsableCharacter(insertCharacter, insertPos)) {\n        return true;\n      }\n\n      insertPos++; // stop iteration if maximum value length reached\n\n      if (insertPos >= mask.length) {\n        return false;\n      }\n    }\n\n    var isAllowed = isAllowedChar(maskOptions, insertPos, insertCharacter) || insertCharacter === maskChar;\n\n    if (!isAllowed) {\n      return true;\n    }\n\n    if (insertPos < value.length) {\n      if (maskChar || isInputFilled || insertPos < prefix.length) {\n        value = value.slice(0, insertPos) + insertCharacter + value.slice(insertPos + 1);\n      } else {\n        value = value.slice(0, insertPos) + insertCharacter + value.slice(insertPos);\n        value = formatValue(maskOptions, value);\n      }\n    } else if (!maskChar) {\n      value += insertCharacter;\n    }\n\n    insertPos++; // stop iteration if maximum value length reached\n\n    return insertPos < mask.length;\n  });\n  return value;\n}\nexport function getInsertStringLength(maskOptions, value, insertStr, insertPos) {\n  var mask = maskOptions.mask,\n      maskChar = maskOptions.maskChar;\n  var arrayInsertStr = insertStr.split('');\n  var initialInsertPos = insertPos;\n\n  var isUsablePosition = function isUsablePosition(pos, character) {\n    return !isPermanentChar(maskOptions, pos) || character === mask[pos];\n  };\n\n  arrayInsertStr.every(function (insertCharacter) {\n    while (!isUsablePosition(insertPos, insertCharacter)) {\n      insertPos++; // stop iteration if maximum value length reached\n\n      if (insertPos >= mask.length) {\n        return false;\n      }\n    }\n\n    var isAllowed = isAllowedChar(maskOptions, insertPos, insertCharacter) || insertCharacter === maskChar;\n\n    if (isAllowed) {\n      insertPos++;\n    } // stop iteration if maximum value length reached\n\n\n    return insertPos < mask.length;\n  });\n  return insertPos - initialInsertPos;\n}"]},"metadata":{},"sourceType":"module"}