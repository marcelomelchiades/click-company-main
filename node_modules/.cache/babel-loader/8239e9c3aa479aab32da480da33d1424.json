{"ast":null,"code":"export function isPermanentChar(maskOptions, pos) {\n  return maskOptions.permanents.indexOf(pos) !== -1;\n}\nexport function isAllowedChar(maskOptions, pos, character) {\n  var mask = maskOptions.mask,\n    charsRules = maskOptions.charsRules;\n  if (!character) {\n    return false;\n  }\n  if (isPermanentChar(maskOptions, pos)) {\n    return mask[pos] === character;\n  }\n  var ruleChar = mask[pos];\n  var charRule = charsRules[ruleChar];\n  return new RegExp(charRule).test(character);\n}\nexport function isEmpty(maskOptions, value) {\n  return value.split('').every(function (character, i) {\n    return isPermanentChar(maskOptions, i) || !isAllowedChar(maskOptions, i, character);\n  });\n}\nexport function getFilledLength(maskOptions, value) {\n  var maskChar = maskOptions.maskChar,\n    prefix = maskOptions.prefix;\n  if (!maskChar) {\n    while (value.length > prefix.length && isPermanentChar(maskOptions, value.length - 1)) {\n      value = value.slice(0, value.length - 1);\n    }\n    return value.length;\n  }\n  var filledLength = prefix.length;\n  for (var i = value.length; i >= prefix.length; i--) {\n    var character = value[i];\n    var isEnteredCharacter = !isPermanentChar(maskOptions, i) && isAllowedChar(maskOptions, i, character);\n    if (isEnteredCharacter) {\n      filledLength = i + 1;\n      break;\n    }\n  }\n  return filledLength;\n}\nexport function isFilled(maskOptions, value) {\n  return getFilledLength(maskOptions, value) === maskOptions.mask.length;\n}\nexport function formatValue(maskOptions, value) {\n  var maskChar = maskOptions.maskChar,\n    mask = maskOptions.mask,\n    prefix = maskOptions.prefix;\n  if (!maskChar) {\n    value = insertString(maskOptions, '', value, 0);\n    if (value.length < prefix.length) {\n      value = prefix;\n    }\n    while (value.length < mask.length && isPermanentChar(maskOptions, value.length)) {\n      value += mask[value.length];\n    }\n    return value;\n  }\n  if (value) {\n    var emptyValue = formatValue(maskOptions, '');\n    return insertString(maskOptions, emptyValue, value, 0);\n  }\n  for (var i = 0; i < mask.length; i++) {\n    if (isPermanentChar(maskOptions, i)) {\n      value += mask[i];\n    } else {\n      value += maskChar;\n    }\n  }\n  return value;\n}\nexport function clearRange(maskOptions, value, start, len) {\n  var end = start + len;\n  var maskChar = maskOptions.maskChar,\n    mask = maskOptions.mask,\n    prefix = maskOptions.prefix;\n  var arrayValue = value.split('');\n  if (!maskChar) {\n    // remove any permanent chars after clear range, they will be added back by foramtValue\n    for (var i = end; i < arrayValue.length; i++) {\n      if (isPermanentChar(maskOptions, i)) {\n        arrayValue[i] = '';\n      }\n    }\n    start = Math.max(prefix.length, start);\n    arrayValue.splice(start, end - start);\n    value = arrayValue.join('');\n    return formatValue(maskOptions, value);\n  }\n  return arrayValue.map(function (character, i) {\n    if (i < start || i >= end) {\n      return character;\n    }\n    if (isPermanentChar(maskOptions, i)) {\n      return mask[i];\n    }\n    return maskChar;\n  }).join('');\n}\nexport function insertString(maskOptions, value, insertStr, insertPos) {\n  var mask = maskOptions.mask,\n    maskChar = maskOptions.maskChar,\n    prefix = maskOptions.prefix;\n  var arrayInsertStr = insertStr.split('');\n  var isInputFilled = isFilled(maskOptions, value);\n  var isUsablePosition = function isUsablePosition(pos, character) {\n    return !isPermanentChar(maskOptions, pos) || character === mask[pos];\n  };\n  var isUsableCharacter = function isUsableCharacter(character, pos) {\n    return !maskChar || !isPermanentChar(maskOptions, pos) || character !== maskChar;\n  };\n  if (!maskChar && insertPos > value.length) {\n    value += mask.slice(value.length, insertPos);\n  }\n  arrayInsertStr.every(function (insertCharacter) {\n    while (!isUsablePosition(insertPos, insertCharacter)) {\n      if (insertPos >= value.length) {\n        value += mask[insertPos];\n      }\n      if (!isUsableCharacter(insertCharacter, insertPos)) {\n        return true;\n      }\n      insertPos++; // stop iteration if maximum value length reached\n\n      if (insertPos >= mask.length) {\n        return false;\n      }\n    }\n    var isAllowed = isAllowedChar(maskOptions, insertPos, insertCharacter) || insertCharacter === maskChar;\n    if (!isAllowed) {\n      return true;\n    }\n    if (insertPos < value.length) {\n      if (maskChar || isInputFilled || insertPos < prefix.length) {\n        value = value.slice(0, insertPos) + insertCharacter + value.slice(insertPos + 1);\n      } else {\n        value = value.slice(0, insertPos) + insertCharacter + value.slice(insertPos);\n        value = formatValue(maskOptions, value);\n      }\n    } else if (!maskChar) {\n      value += insertCharacter;\n    }\n    insertPos++; // stop iteration if maximum value length reached\n\n    return insertPos < mask.length;\n  });\n  return value;\n}\nexport function getInsertStringLength(maskOptions, value, insertStr, insertPos) {\n  var mask = maskOptions.mask,\n    maskChar = maskOptions.maskChar;\n  var arrayInsertStr = insertStr.split('');\n  var initialInsertPos = insertPos;\n  var isUsablePosition = function isUsablePosition(pos, character) {\n    return !isPermanentChar(maskOptions, pos) || character === mask[pos];\n  };\n  arrayInsertStr.every(function (insertCharacter) {\n    while (!isUsablePosition(insertPos, insertCharacter)) {\n      insertPos++; // stop iteration if maximum value length reached\n\n      if (insertPos >= mask.length) {\n        return false;\n      }\n    }\n    var isAllowed = isAllowedChar(maskOptions, insertPos, insertCharacter) || insertCharacter === maskChar;\n    if (isAllowed) {\n      insertPos++;\n    } // stop iteration if maximum value length reached\n\n    return insertPos < mask.length;\n  });\n  return insertPos - initialInsertPos;\n}","map":{"version":3,"names":["isPermanentChar","maskOptions","pos","permanents","indexOf","isAllowedChar","character","mask","charsRules","ruleChar","charRule","RegExp","test","isEmpty","value","split","every","i","getFilledLength","maskChar","prefix","length","slice","filledLength","isEnteredCharacter","isFilled","formatValue","insertString","emptyValue","clearRange","start","len","end","arrayValue","Math","max","splice","join","map","insertStr","insertPos","arrayInsertStr","isInputFilled","isUsablePosition","isUsableCharacter","insertCharacter","isAllowed","getInsertStringLength","initialInsertPos"],"sources":["/home/clickc/www/click-company-main/node_modules/react-input-mask/es/utils/string.js"],"sourcesContent":["export function isPermanentChar(maskOptions, pos) {\n  return maskOptions.permanents.indexOf(pos) !== -1;\n}\nexport function isAllowedChar(maskOptions, pos, character) {\n  var mask = maskOptions.mask,\n      charsRules = maskOptions.charsRules;\n\n  if (!character) {\n    return false;\n  }\n\n  if (isPermanentChar(maskOptions, pos)) {\n    return mask[pos] === character;\n  }\n\n  var ruleChar = mask[pos];\n  var charRule = charsRules[ruleChar];\n  return new RegExp(charRule).test(character);\n}\nexport function isEmpty(maskOptions, value) {\n  return value.split('').every(function (character, i) {\n    return isPermanentChar(maskOptions, i) || !isAllowedChar(maskOptions, i, character);\n  });\n}\nexport function getFilledLength(maskOptions, value) {\n  var maskChar = maskOptions.maskChar,\n      prefix = maskOptions.prefix;\n\n  if (!maskChar) {\n    while (value.length > prefix.length && isPermanentChar(maskOptions, value.length - 1)) {\n      value = value.slice(0, value.length - 1);\n    }\n\n    return value.length;\n  }\n\n  var filledLength = prefix.length;\n\n  for (var i = value.length; i >= prefix.length; i--) {\n    var character = value[i];\n    var isEnteredCharacter = !isPermanentChar(maskOptions, i) && isAllowedChar(maskOptions, i, character);\n\n    if (isEnteredCharacter) {\n      filledLength = i + 1;\n      break;\n    }\n  }\n\n  return filledLength;\n}\nexport function isFilled(maskOptions, value) {\n  return getFilledLength(maskOptions, value) === maskOptions.mask.length;\n}\nexport function formatValue(maskOptions, value) {\n  var maskChar = maskOptions.maskChar,\n      mask = maskOptions.mask,\n      prefix = maskOptions.prefix;\n\n  if (!maskChar) {\n    value = insertString(maskOptions, '', value, 0);\n\n    if (value.length < prefix.length) {\n      value = prefix;\n    }\n\n    while (value.length < mask.length && isPermanentChar(maskOptions, value.length)) {\n      value += mask[value.length];\n    }\n\n    return value;\n  }\n\n  if (value) {\n    var emptyValue = formatValue(maskOptions, '');\n    return insertString(maskOptions, emptyValue, value, 0);\n  }\n\n  for (var i = 0; i < mask.length; i++) {\n    if (isPermanentChar(maskOptions, i)) {\n      value += mask[i];\n    } else {\n      value += maskChar;\n    }\n  }\n\n  return value;\n}\nexport function clearRange(maskOptions, value, start, len) {\n  var end = start + len;\n  var maskChar = maskOptions.maskChar,\n      mask = maskOptions.mask,\n      prefix = maskOptions.prefix;\n  var arrayValue = value.split('');\n\n  if (!maskChar) {\n    // remove any permanent chars after clear range, they will be added back by foramtValue\n    for (var i = end; i < arrayValue.length; i++) {\n      if (isPermanentChar(maskOptions, i)) {\n        arrayValue[i] = '';\n      }\n    }\n\n    start = Math.max(prefix.length, start);\n    arrayValue.splice(start, end - start);\n    value = arrayValue.join('');\n    return formatValue(maskOptions, value);\n  }\n\n  return arrayValue.map(function (character, i) {\n    if (i < start || i >= end) {\n      return character;\n    }\n\n    if (isPermanentChar(maskOptions, i)) {\n      return mask[i];\n    }\n\n    return maskChar;\n  }).join('');\n}\nexport function insertString(maskOptions, value, insertStr, insertPos) {\n  var mask = maskOptions.mask,\n      maskChar = maskOptions.maskChar,\n      prefix = maskOptions.prefix;\n  var arrayInsertStr = insertStr.split('');\n  var isInputFilled = isFilled(maskOptions, value);\n\n  var isUsablePosition = function isUsablePosition(pos, character) {\n    return !isPermanentChar(maskOptions, pos) || character === mask[pos];\n  };\n\n  var isUsableCharacter = function isUsableCharacter(character, pos) {\n    return !maskChar || !isPermanentChar(maskOptions, pos) || character !== maskChar;\n  };\n\n  if (!maskChar && insertPos > value.length) {\n    value += mask.slice(value.length, insertPos);\n  }\n\n  arrayInsertStr.every(function (insertCharacter) {\n    while (!isUsablePosition(insertPos, insertCharacter)) {\n      if (insertPos >= value.length) {\n        value += mask[insertPos];\n      }\n\n      if (!isUsableCharacter(insertCharacter, insertPos)) {\n        return true;\n      }\n\n      insertPos++; // stop iteration if maximum value length reached\n\n      if (insertPos >= mask.length) {\n        return false;\n      }\n    }\n\n    var isAllowed = isAllowedChar(maskOptions, insertPos, insertCharacter) || insertCharacter === maskChar;\n\n    if (!isAllowed) {\n      return true;\n    }\n\n    if (insertPos < value.length) {\n      if (maskChar || isInputFilled || insertPos < prefix.length) {\n        value = value.slice(0, insertPos) + insertCharacter + value.slice(insertPos + 1);\n      } else {\n        value = value.slice(0, insertPos) + insertCharacter + value.slice(insertPos);\n        value = formatValue(maskOptions, value);\n      }\n    } else if (!maskChar) {\n      value += insertCharacter;\n    }\n\n    insertPos++; // stop iteration if maximum value length reached\n\n    return insertPos < mask.length;\n  });\n  return value;\n}\nexport function getInsertStringLength(maskOptions, value, insertStr, insertPos) {\n  var mask = maskOptions.mask,\n      maskChar = maskOptions.maskChar;\n  var arrayInsertStr = insertStr.split('');\n  var initialInsertPos = insertPos;\n\n  var isUsablePosition = function isUsablePosition(pos, character) {\n    return !isPermanentChar(maskOptions, pos) || character === mask[pos];\n  };\n\n  arrayInsertStr.every(function (insertCharacter) {\n    while (!isUsablePosition(insertPos, insertCharacter)) {\n      insertPos++; // stop iteration if maximum value length reached\n\n      if (insertPos >= mask.length) {\n        return false;\n      }\n    }\n\n    var isAllowed = isAllowedChar(maskOptions, insertPos, insertCharacter) || insertCharacter === maskChar;\n\n    if (isAllowed) {\n      insertPos++;\n    } // stop iteration if maximum value length reached\n\n\n    return insertPos < mask.length;\n  });\n  return insertPos - initialInsertPos;\n}"],"mappings":"AAAA,OAAO,SAASA,eAAeA,CAACC,WAAW,EAAEC,GAAG,EAAE;EAChD,OAAOD,WAAW,CAACE,UAAU,CAACC,OAAO,CAACF,GAAG,CAAC,KAAK,CAAC,CAAC;AACnD;AACA,OAAO,SAASG,aAAaA,CAACJ,WAAW,EAAEC,GAAG,EAAEI,SAAS,EAAE;EACzD,IAAIC,IAAI,GAAGN,WAAW,CAACM,IAAI;IACvBC,UAAU,GAAGP,WAAW,CAACO,UAAU;EAEvC,IAAI,CAACF,SAAS,EAAE;IACd,OAAO,KAAK;EACd;EAEA,IAAIN,eAAe,CAACC,WAAW,EAAEC,GAAG,CAAC,EAAE;IACrC,OAAOK,IAAI,CAACL,GAAG,CAAC,KAAKI,SAAS;EAChC;EAEA,IAAIG,QAAQ,GAAGF,IAAI,CAACL,GAAG,CAAC;EACxB,IAAIQ,QAAQ,GAAGF,UAAU,CAACC,QAAQ,CAAC;EACnC,OAAO,IAAIE,MAAM,CAACD,QAAQ,CAAC,CAACE,IAAI,CAACN,SAAS,CAAC;AAC7C;AACA,OAAO,SAASO,OAAOA,CAACZ,WAAW,EAAEa,KAAK,EAAE;EAC1C,OAAOA,KAAK,CAACC,KAAK,CAAC,EAAE,CAAC,CAACC,KAAK,CAAC,UAAUV,SAAS,EAAEW,CAAC,EAAE;IACnD,OAAOjB,eAAe,CAACC,WAAW,EAAEgB,CAAC,CAAC,IAAI,CAACZ,aAAa,CAACJ,WAAW,EAAEgB,CAAC,EAAEX,SAAS,CAAC;EACrF,CAAC,CAAC;AACJ;AACA,OAAO,SAASY,eAAeA,CAACjB,WAAW,EAAEa,KAAK,EAAE;EAClD,IAAIK,QAAQ,GAAGlB,WAAW,CAACkB,QAAQ;IAC/BC,MAAM,GAAGnB,WAAW,CAACmB,MAAM;EAE/B,IAAI,CAACD,QAAQ,EAAE;IACb,OAAOL,KAAK,CAACO,MAAM,GAAGD,MAAM,CAACC,MAAM,IAAIrB,eAAe,CAACC,WAAW,EAAEa,KAAK,CAACO,MAAM,GAAG,CAAC,CAAC,EAAE;MACrFP,KAAK,GAAGA,KAAK,CAACQ,KAAK,CAAC,CAAC,EAAER,KAAK,CAACO,MAAM,GAAG,CAAC,CAAC;IAC1C;IAEA,OAAOP,KAAK,CAACO,MAAM;EACrB;EAEA,IAAIE,YAAY,GAAGH,MAAM,CAACC,MAAM;EAEhC,KAAK,IAAIJ,CAAC,GAAGH,KAAK,CAACO,MAAM,EAAEJ,CAAC,IAAIG,MAAM,CAACC,MAAM,EAAEJ,CAAC,EAAE,EAAE;IAClD,IAAIX,SAAS,GAAGQ,KAAK,CAACG,CAAC,CAAC;IACxB,IAAIO,kBAAkB,GAAG,CAACxB,eAAe,CAACC,WAAW,EAAEgB,CAAC,CAAC,IAAIZ,aAAa,CAACJ,WAAW,EAAEgB,CAAC,EAAEX,SAAS,CAAC;IAErG,IAAIkB,kBAAkB,EAAE;MACtBD,YAAY,GAAGN,CAAC,GAAG,CAAC;MACpB;IACF;EACF;EAEA,OAAOM,YAAY;AACrB;AACA,OAAO,SAASE,QAAQA,CAACxB,WAAW,EAAEa,KAAK,EAAE;EAC3C,OAAOI,eAAe,CAACjB,WAAW,EAAEa,KAAK,CAAC,KAAKb,WAAW,CAACM,IAAI,CAACc,MAAM;AACxE;AACA,OAAO,SAASK,WAAWA,CAACzB,WAAW,EAAEa,KAAK,EAAE;EAC9C,IAAIK,QAAQ,GAAGlB,WAAW,CAACkB,QAAQ;IAC/BZ,IAAI,GAAGN,WAAW,CAACM,IAAI;IACvBa,MAAM,GAAGnB,WAAW,CAACmB,MAAM;EAE/B,IAAI,CAACD,QAAQ,EAAE;IACbL,KAAK,GAAGa,YAAY,CAAC1B,WAAW,EAAE,EAAE,EAAEa,KAAK,EAAE,CAAC,CAAC;IAE/C,IAAIA,KAAK,CAACO,MAAM,GAAGD,MAAM,CAACC,MAAM,EAAE;MAChCP,KAAK,GAAGM,MAAM;IAChB;IAEA,OAAON,KAAK,CAACO,MAAM,GAAGd,IAAI,CAACc,MAAM,IAAIrB,eAAe,CAACC,WAAW,EAAEa,KAAK,CAACO,MAAM,CAAC,EAAE;MAC/EP,KAAK,IAAIP,IAAI,CAACO,KAAK,CAACO,MAAM,CAAC;IAC7B;IAEA,OAAOP,KAAK;EACd;EAEA,IAAIA,KAAK,EAAE;IACT,IAAIc,UAAU,GAAGF,WAAW,CAACzB,WAAW,EAAE,EAAE,CAAC;IAC7C,OAAO0B,YAAY,CAAC1B,WAAW,EAAE2B,UAAU,EAAEd,KAAK,EAAE,CAAC,CAAC;EACxD;EAEA,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,IAAI,CAACc,MAAM,EAAEJ,CAAC,EAAE,EAAE;IACpC,IAAIjB,eAAe,CAACC,WAAW,EAAEgB,CAAC,CAAC,EAAE;MACnCH,KAAK,IAAIP,IAAI,CAACU,CAAC,CAAC;IAClB,CAAC,MAAM;MACLH,KAAK,IAAIK,QAAQ;IACnB;EACF;EAEA,OAAOL,KAAK;AACd;AACA,OAAO,SAASe,UAAUA,CAAC5B,WAAW,EAAEa,KAAK,EAAEgB,KAAK,EAAEC,GAAG,EAAE;EACzD,IAAIC,GAAG,GAAGF,KAAK,GAAGC,GAAG;EACrB,IAAIZ,QAAQ,GAAGlB,WAAW,CAACkB,QAAQ;IAC/BZ,IAAI,GAAGN,WAAW,CAACM,IAAI;IACvBa,MAAM,GAAGnB,WAAW,CAACmB,MAAM;EAC/B,IAAIa,UAAU,GAAGnB,KAAK,CAACC,KAAK,CAAC,EAAE,CAAC;EAEhC,IAAI,CAACI,QAAQ,EAAE;IACb;IACA,KAAK,IAAIF,CAAC,GAAGe,GAAG,EAAEf,CAAC,GAAGgB,UAAU,CAACZ,MAAM,EAAEJ,CAAC,EAAE,EAAE;MAC5C,IAAIjB,eAAe,CAACC,WAAW,EAAEgB,CAAC,CAAC,EAAE;QACnCgB,UAAU,CAAChB,CAAC,CAAC,GAAG,EAAE;MACpB;IACF;IAEAa,KAAK,GAAGI,IAAI,CAACC,GAAG,CAACf,MAAM,CAACC,MAAM,EAAES,KAAK,CAAC;IACtCG,UAAU,CAACG,MAAM,CAACN,KAAK,EAAEE,GAAG,GAAGF,KAAK,CAAC;IACrChB,KAAK,GAAGmB,UAAU,CAACI,IAAI,CAAC,EAAE,CAAC;IAC3B,OAAOX,WAAW,CAACzB,WAAW,EAAEa,KAAK,CAAC;EACxC;EAEA,OAAOmB,UAAU,CAACK,GAAG,CAAC,UAAUhC,SAAS,EAAEW,CAAC,EAAE;IAC5C,IAAIA,CAAC,GAAGa,KAAK,IAAIb,CAAC,IAAIe,GAAG,EAAE;MACzB,OAAO1B,SAAS;IAClB;IAEA,IAAIN,eAAe,CAACC,WAAW,EAAEgB,CAAC,CAAC,EAAE;MACnC,OAAOV,IAAI,CAACU,CAAC,CAAC;IAChB;IAEA,OAAOE,QAAQ;EACjB,CAAC,CAAC,CAACkB,IAAI,CAAC,EAAE,CAAC;AACb;AACA,OAAO,SAASV,YAAYA,CAAC1B,WAAW,EAAEa,KAAK,EAAEyB,SAAS,EAAEC,SAAS,EAAE;EACrE,IAAIjC,IAAI,GAAGN,WAAW,CAACM,IAAI;IACvBY,QAAQ,GAAGlB,WAAW,CAACkB,QAAQ;IAC/BC,MAAM,GAAGnB,WAAW,CAACmB,MAAM;EAC/B,IAAIqB,cAAc,GAAGF,SAAS,CAACxB,KAAK,CAAC,EAAE,CAAC;EACxC,IAAI2B,aAAa,GAAGjB,QAAQ,CAACxB,WAAW,EAAEa,KAAK,CAAC;EAEhD,IAAI6B,gBAAgB,GAAG,SAASA,gBAAgBA,CAACzC,GAAG,EAAEI,SAAS,EAAE;IAC/D,OAAO,CAACN,eAAe,CAACC,WAAW,EAAEC,GAAG,CAAC,IAAII,SAAS,KAAKC,IAAI,CAACL,GAAG,CAAC;EACtE,CAAC;EAED,IAAI0C,iBAAiB,GAAG,SAASA,iBAAiBA,CAACtC,SAAS,EAAEJ,GAAG,EAAE;IACjE,OAAO,CAACiB,QAAQ,IAAI,CAACnB,eAAe,CAACC,WAAW,EAAEC,GAAG,CAAC,IAAII,SAAS,KAAKa,QAAQ;EAClF,CAAC;EAED,IAAI,CAACA,QAAQ,IAAIqB,SAAS,GAAG1B,KAAK,CAACO,MAAM,EAAE;IACzCP,KAAK,IAAIP,IAAI,CAACe,KAAK,CAACR,KAAK,CAACO,MAAM,EAAEmB,SAAS,CAAC;EAC9C;EAEAC,cAAc,CAACzB,KAAK,CAAC,UAAU6B,eAAe,EAAE;IAC9C,OAAO,CAACF,gBAAgB,CAACH,SAAS,EAAEK,eAAe,CAAC,EAAE;MACpD,IAAIL,SAAS,IAAI1B,KAAK,CAACO,MAAM,EAAE;QAC7BP,KAAK,IAAIP,IAAI,CAACiC,SAAS,CAAC;MAC1B;MAEA,IAAI,CAACI,iBAAiB,CAACC,eAAe,EAAEL,SAAS,CAAC,EAAE;QAClD,OAAO,IAAI;MACb;MAEAA,SAAS,EAAE,CAAC,CAAC;;MAEb,IAAIA,SAAS,IAAIjC,IAAI,CAACc,MAAM,EAAE;QAC5B,OAAO,KAAK;MACd;IACF;IAEA,IAAIyB,SAAS,GAAGzC,aAAa,CAACJ,WAAW,EAAEuC,SAAS,EAAEK,eAAe,CAAC,IAAIA,eAAe,KAAK1B,QAAQ;IAEtG,IAAI,CAAC2B,SAAS,EAAE;MACd,OAAO,IAAI;IACb;IAEA,IAAIN,SAAS,GAAG1B,KAAK,CAACO,MAAM,EAAE;MAC5B,IAAIF,QAAQ,IAAIuB,aAAa,IAAIF,SAAS,GAAGpB,MAAM,CAACC,MAAM,EAAE;QAC1DP,KAAK,GAAGA,KAAK,CAACQ,KAAK,CAAC,CAAC,EAAEkB,SAAS,CAAC,GAAGK,eAAe,GAAG/B,KAAK,CAACQ,KAAK,CAACkB,SAAS,GAAG,CAAC,CAAC;MAClF,CAAC,MAAM;QACL1B,KAAK,GAAGA,KAAK,CAACQ,KAAK,CAAC,CAAC,EAAEkB,SAAS,CAAC,GAAGK,eAAe,GAAG/B,KAAK,CAACQ,KAAK,CAACkB,SAAS,CAAC;QAC5E1B,KAAK,GAAGY,WAAW,CAACzB,WAAW,EAAEa,KAAK,CAAC;MACzC;IACF,CAAC,MAAM,IAAI,CAACK,QAAQ,EAAE;MACpBL,KAAK,IAAI+B,eAAe;IAC1B;IAEAL,SAAS,EAAE,CAAC,CAAC;;IAEb,OAAOA,SAAS,GAAGjC,IAAI,CAACc,MAAM;EAChC,CAAC,CAAC;EACF,OAAOP,KAAK;AACd;AACA,OAAO,SAASiC,qBAAqBA,CAAC9C,WAAW,EAAEa,KAAK,EAAEyB,SAAS,EAAEC,SAAS,EAAE;EAC9E,IAAIjC,IAAI,GAAGN,WAAW,CAACM,IAAI;IACvBY,QAAQ,GAAGlB,WAAW,CAACkB,QAAQ;EACnC,IAAIsB,cAAc,GAAGF,SAAS,CAACxB,KAAK,CAAC,EAAE,CAAC;EACxC,IAAIiC,gBAAgB,GAAGR,SAAS;EAEhC,IAAIG,gBAAgB,GAAG,SAASA,gBAAgBA,CAACzC,GAAG,EAAEI,SAAS,EAAE;IAC/D,OAAO,CAACN,eAAe,CAACC,WAAW,EAAEC,GAAG,CAAC,IAAII,SAAS,KAAKC,IAAI,CAACL,GAAG,CAAC;EACtE,CAAC;EAEDuC,cAAc,CAACzB,KAAK,CAAC,UAAU6B,eAAe,EAAE;IAC9C,OAAO,CAACF,gBAAgB,CAACH,SAAS,EAAEK,eAAe,CAAC,EAAE;MACpDL,SAAS,EAAE,CAAC,CAAC;;MAEb,IAAIA,SAAS,IAAIjC,IAAI,CAACc,MAAM,EAAE;QAC5B,OAAO,KAAK;MACd;IACF;IAEA,IAAIyB,SAAS,GAAGzC,aAAa,CAACJ,WAAW,EAAEuC,SAAS,EAAEK,eAAe,CAAC,IAAIA,eAAe,KAAK1B,QAAQ;IAEtG,IAAI2B,SAAS,EAAE;MACbN,SAAS,EAAE;IACb,CAAC,CAAC;;IAGF,OAAOA,SAAS,GAAGjC,IAAI,CAACc,MAAM;EAChC,CAAC,CAAC;EACF,OAAOmB,SAAS,GAAGQ,gBAAgB;AACrC"},"metadata":{},"sourceType":"module"}